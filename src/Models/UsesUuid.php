<?php

namespace DarkGhostHunter\Laratraits\Models;

use Illuminate\Support\Str;
use DarkGhostHunter\Laratraits\Scopes\UuidScope;

/**
 * Trait UsesUuid
 * ---
 * This trait auto-fills an autogenerated UUID when the model is instanced. It also adds convenient local
 * scopes to the Eloquent Query Builder to find and filter this model through its UUID. For additional
 * performance, you can create an index on the UUID column, which can also be changed through here.
 *
 * @package DarkGhostHunter\Laratraits\Models
 *
 * @method \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|static[]|static|null findUuid($uuid, $columns = ['*'])
 * @method \Illuminate\Database\Eloquent\Collection findManyUuid($uuid, $columns = ['*'])
 * @method \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|static[]|static|null findUuidOrFail($uuid, $columns = ['*'])
 * @method \Illuminate\Database\Eloquent\Model|static findUuidOrNew($uuid, $columns = ['*'])
 * @method \Illuminate\Database\Eloquent\Builder|static whereUuid($uuid)
 * @method \Illuminate\Database\Eloquent\Builder|static whereUuidNot($uuid)
 */
trait UsesUuid
{
    /**
     * Boot the UsesUuid trait.
     *
     * @return void
     */
    protected static function bootUsesUuid()
    {
        if (static::shouldAddGlobalScope()) {
            static::addGlobalScope(new UuidScope);
        }
    }

    /**
     * Returns if this trait should add the local scope to the Eloquent Query Builder.
     *
     * @return bool
     */
    protected static function shouldAddGlobalScope()
    {
        return true;
    }

    /**
     * Initialize the UsesUuid trait.
     *
     * @return void
     */
    protected function initializeUsesUuid()
    {
        $this->setAttribute($this->getQualifiedUuidColumn(), $this->generateUuid());
    }

    /**
     * Returns the column name where the UUID should be put.
     *
     * @return string
     */
    protected function getQualifiedUuidColumn()
    {
        return 'uuid';
    }

    /**
     * Returns an UUID to fill inside the model.
     *
     * @return \Ramsey\Uuid\UuidInterface|string
     */
    protected function generateUuid()
    {
        return Str::uuid();
    }
}
